<?php
	/**
	 * The abstract QSpinnerGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QSpinnerBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QSpinner class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * <div>Triggered when the value of the spinner has changed and the input is
	 * 		no longer focused.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div></li></ul>
	 */
	class QSpinner_ChangeEvent extends QJqUiEvent {
		const EventName = 'spinchange';
	}
	/**
	 * <div>Triggered when the spinner is
	 * 		created.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QSpinner_CreateEvent extends QJqUiEvent {
		const EventName = 'spincreate';
	}
	/**
	 * <div>Triggered during increment/decrement (to determine direction of spin
	 * 		compare current value with <code>ui.value</code>). 				<p>Can be canceled,
	 * 		preventing the value from being
	 * 		updated.</p></div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>value</strong></div> <div>Type: <a>Number</a></div>
	 * 		<div>The new value to be set, unless the event is
	 * 		cancelled.</div></li></ul></li></ul>
	 */
	class QSpinner_SpinEvent extends QJqUiEvent {
		const EventName = 'spin';
	}
	/**
	 * <div>Triggered before a spin. Can be canceled, preventing the spin from
	 * 		occurring.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QSpinner_StartEvent extends QJqUiEvent {
		const EventName = 'spinstart';
	}
	/**
	 * <div>Triggered after a spin.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div></li></ul>
	 */
	class QSpinner_StopEvent extends QJqUiEvent {
		const EventName = 'spinstop';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property string $Culture <div>Sets the culture to use for parsing and formatting the value. If
	 * 		<code>null</code>, the currently set culture in <code>Globalize</code> is
	 * 		used, see <a>Globalize docs</a> for available cultures. Only relevant if
	 * 		the <a><code>numberFormat</code></a> option is set. Requires
	 * 		<a>Globalize</a> to be included.</div>
	 * @property boolean $Disabled <div>Disables the spinner if set to <code>true</code>.</div>
	 * @property mixed $Icons <div>Icons to use for buttons, matching an icon defined by the jQuery UI
	 * 		CSS Framework. 				<ul><li>up (string, default:
	 * 		"ui-icon-triangle-1-n")</li> 					<li>down (string, default:
	 * 		"ui-icon-triangle-1-s")</li></ul></div>
	 * @property mixed $Incremental <div>Controls the number of steps taken when holding down a spin
	 * 		button.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Boolean</strong>: When set to
	 * 		<code>true</code>, the stepping delta will increase when spun incessantly.
	 * 		When set to <code>false</code>, all steps are equal (as defined by the
	 * 		<a><code>step</code></a> option).</li> <li><strong>Function</strong>:
	 * 		Receives one parameter: the number of spins that have occurred. Must return
	 * 		the number of steps that should occur for the current spin.</li></ul>
	 * @property mixed $Max <div>The maximum allowed value. The element's <code>max</code> attribute is
	 * 		used if it exists and the option is not explicitly set. If
	 * 		<code>null</code>, there is no maximum enforced.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Number</strong>: The maximum
	 * 		value.</li> <li><strong>String</strong>: If <a>Globalize</a> is included,
	 * 		the <code>max</code> option can be passed as a string which will be parsed
	 * 		based on the <a><code>numberFormat</code></a> and
	 * 		<a><code>culture</code></a> options; otherwise it will fall back to the
	 * 		native <code>parseFloat()</code> method.</li></ul>
	 * @property mixed $Min <div>The minimum allowed value. The element's <code>min</code> attribute is
	 * 		used if it exists and the option is not explicitly set. If
	 * 		<code>null</code>, there is no minimum enforced.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Number</strong>: The minimum
	 * 		value.</li> <li><strong>String</strong>: If <a>Globalize</a> is included,
	 * 		the <code>min</code> option can be passed as a string which will be parsed
	 * 		based on the <a><code>numberFormat</code></a> and
	 * 		<a><code>culture</code></a> options; otherwise it will fall back to the
	 * 		native <code>parseFloat()</code> method.</li></ul>
	 * @property string $NumberFormat <div>Format of numbers passed to  <a><code>Globalize</code></a>, if
	 * 		available. Most common are <code>"n"</code> for a decimal number and
	 * 		<code>"C"</code> for a currency value. Also see the
	 * 		<a><code>culture</code></a> option.</div>
	 * @property integer $Page <div>The number of steps to take when paging via the
	 * 		<a><code>pageUp</code></a>/<a><code>pageDown</code></a> methods.</div>
	 * @property mixed $Step <div>The size of the step to take when spinning via buttons or via the
	 * 		<a><code>stepUp()</code></a>/<a><code>stepDown()</code></a> methods. The
	 * 		element's <code>step</code> attribute is used if it exists and the option
	 * 		is not explicitly set.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: The size of the
	 * 		step.</li> <li><strong>String</strong>: If <a>Globalize</a> is included,
	 * 		the <code>step</code> option can be passed as a string which will be parsed
	 * 		based on the <a><code>numberFormat</code></a> and
	 * 		<a><code>culture</code></a> options, otherwise it will fall back to the
	 * 		native <code>parseFloat</code>.</li></ul>
	 */

	class QSpinnerGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var string */
		protected $strCulture = null;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var mixed */
		protected $mixIcons = null;
		/** @var mixed */
		protected $mixIncremental = null;
		/** @var mixed */
		protected $mixMax = null;
		/** @var mixed */
		protected $mixMin = null;
		/** @var string */
		protected $strNumberFormat = null;
		/** @var integer */
		protected $intPage = null;
		/** @var mixed */
		protected $mixStep = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Culture', 'culture');
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Icons', 'icons');
			$strJqOptions .= $this->makeJsProperty('Incremental', 'incremental');
			$strJqOptions .= $this->makeJsProperty('Max', 'max');
			$strJqOptions .= $this->makeJsProperty('Min', 'min');
			$strJqOptions .= $this->makeJsProperty('NumberFormat', 'numberFormat');
			$strJqOptions .= $this->makeJsProperty('Page', 'page');
			$strJqOptions .= $this->makeJsProperty('Step', 'step');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'spinner';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * <div>Removes the spinner functionality completely. This will return the
		 * element back to its pre-init state.</div><ul><li><div>This method does not
		 * accept any arguments.</div></li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * <div>Disables the spinner.</div><ul><li><div>This method does not accept
		 * any arguments.</div></li></ul>
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * <div>Enables the spinner.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * <div>Gets the value currently associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * get.</div></li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod("option", $optionName);
		}
		/**
		 * <div>Gets an object containing key/value pairs representing the current
		 * spinner options hash.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod("option");
		}
		/**
		 * <div>Sets the value of the spinner option associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * set.</div></li> <li><div><strong>value</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A value to set for the option.</div></li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * <div>Sets one or more options for the
		 * spinner.</div><ul><li><div><strong>options</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A map of option-value pairs to
		 * set.</div></li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * <div>Decrements the value by the specified number of pages, as defined by
		 * the <a><code>page</code></a> option. Without the parameter, a single page
		 * is decremented.</div><ul><li><div><strong>pages</strong></div> <div>Type:
		 * <a>Number</a></div> <div>Number of pages to decrement, defaults to
		 * 1.</div></li></ul>
		 * @param $pages
		 */
		public function PageDown($pages = null) {
			$this->CallJqUiMethod("pageDown", $pages);
		}
		/**
		 * <div>Increments the value by the specified number of pages, as defined by
		 * the <a><code>page</code></a> option. Without the parameter, a single page
		 * is incremented.</div><ul><li><div><strong>pages</strong></div> <div>Type:
		 * <a>Number</a></div> <div>Number of pages to increment, defaults to
		 * 1.</div></li></ul>
		 * @param $pages
		 */
		public function PageUp($pages = null) {
			$this->CallJqUiMethod("pageUp", $pages);
		}
		/**
		 * <div>Decrements the value by the specified number of steps. Without the
		 * parameter, a single step is decremented. 				<p>If the resulting value is
		 * above the max, below the min, or reuslts in a step mismatch, the value will
		 * be adjusted to the closest valid
		 * value.</p></div><ul><li><div><strong>steps</strong></div> <div>Type:
		 * <a>Number</a></div> <div>Number of steps to decrement, defaults to
		 * 1.</div></li></ul>
		 * @param $steps
		 */
		public function StepDown($steps = null) {
			$this->CallJqUiMethod("stepDown", $steps);
		}
		/**
		 * <div>Increments the value by the specified number of steps. Without the
		 * parameter, a single step is incremented. 				<p>If the resulting value is
		 * above the max, below the min, or reuslts in a step mismatch, the value will
		 * be adjusted to the closest valid
		 * value.</p></div><ul><li><div><strong>steps</strong></div> <div>Type:
		 * <a>Number</a></div> <div>Number of steps to increment, defaults to
		 * 1.</div></li></ul>
		 * @param $steps
		 */
		public function StepUp($steps = null) {
			$this->CallJqUiMethod("stepUp", $steps);
		}
		/**
		 * <div>Gets the current value as a number. The value is parsed based on the
		 * <a><code>numberFormat</code></a> and <a><code>culture</code></a>
		 * options.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Value() {
			$this->CallJqUiMethod("value");
		}
		/**
		 * <div></div><ul><li><div><strong>value</strong></div> <div>Type:
		 * <a>Number</a> or <a>String</a></div> <div>The value to set. If passed as a
		 * string, the value is parsed based on the <a><code>numberFormat</code></a>
		 * and <a><code>culture</code></a> options.</div></li></ul>
		 * @param $value
		 */
		public function Value1($value) {
			$this->CallJqUiMethod("value", $value);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Culture': return $this->strCulture;
				case 'Disabled': return $this->blnDisabled;
				case 'Icons': return $this->mixIcons;
				case 'Incremental': return $this->mixIncremental;
				case 'Max': return $this->mixMax;
				case 'Min': return $this->mixMin;
				case 'NumberFormat': return $this->strNumberFormat;
				case 'Page': return $this->intPage;
				case 'Step': return $this->mixStep;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Culture':
					try {
						$this->strCulture = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'culture', $this->strCulture);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Icons':
					$this->mixIcons = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'icons', $mixValue);
					}
					break;

				case 'Incremental':
					$this->mixIncremental = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'incremental', $mixValue);
					}
					break;

				case 'Max':
					$this->mixMax = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'max', $mixValue);
					}
					break;

				case 'Min':
					$this->mixMin = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'min', $mixValue);
					}
					break;

				case 'NumberFormat':
					try {
						$this->strNumberFormat = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'numberFormat', $this->strNumberFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Page':
					try {
						$this->intPage = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'page', $this->intPage);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Step':
					$this->mixStep = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'step', $mixValue);
					}
					break;


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
