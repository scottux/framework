<?php
	/**
	 * The abstract QTooltipGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QTooltipBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QTooltip class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * <div>Triggered when a tooltip is closed, triggered on <code>focusout</code>
	 * 		or <code>mouseleave</code>.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div> <ul><li><div><strong>tooltip</strong></div> <div>Type:
	 * 		<a>jQuery</a></div> <div>The generated tooltip
	 * 		element.</div></li></ul></li></ul>
	 */
	class QTooltip_CloseEvent extends QJqUiEvent {
		const EventName = 'tooltipclose';
	}
	/**
	 * <div>Triggered when the tooltip is
	 * 		created.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QTooltip_CreateEvent extends QJqUiEvent {
		const EventName = 'tooltipcreate';
	}
	/**
	 * <div>Triggered when a tooltip is shown, triggered on <code>focusin</code>
	 * 		or <code>mouseover</code>.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div> <ul><li><div><strong>tooltip</strong></div> <div>Type:
	 * 		<a>jQuery</a></div> <div>The generated tooltip
	 * 		element.</div></li></ul></li></ul>
	 */
	class QTooltip_OpenEvent extends QJqUiEvent {
		const EventName = 'tooltipopen';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property mixed $Content <div><p>The content of the tooltip.</p>  				<p><em>When changing this
	 * 		option, you likely need to also change the <a><code>items</code></a>
	 * 		option.</em></p></div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Function</strong>: A callback which can
	 * 		either return the content directly, or call the first argument, passing in
	 * 		the content, e.g., for Ajax content.</li> <li><strong>String</strong>: A
	 * 		string of HTML to use for the tooltip content.</li></ul>
	 * @property boolean $Disabled <div>Disables the tooltip if set to <code>true</code>.</div>
	 * @property mixed $Hide <div>If and how to animate the hiding of the tooltip.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Boolean</strong>:  			When set to
	 * 		<code>false</code>, no animation will be used and the tooltip will be
	 * 		hidden immediately. 			When set to <code>true</code>, the tooltip will fade
	 * 		out with the default duration and the default easing.</li>
	 * 		<li><strong>Number</strong>:  			The tooltip will fade out with the
	 * 		specified duration and the default easing.</li>
	 * 		<li><strong>String</strong>:  			The tooltip will be hidden using the
	 * 		specified effect. 			The value can either be the name of a built-in jQuery
	 * 		animateion method, such as <code>"slideUp"</code>, or the name of a jQuery
	 * 		UI effect, such as <code>"fold"</code>. 			In either case the effect will
	 * 		be used with the default duration and the default easing.</li>
	 * 		<li><strong>Object</strong>: If the value is an object, then
	 * 		<code>effect</code>, <code>duration</code>, and <code>easing</code>
	 * 		properties may be provided. If the <code>effect</code> property contains
	 * 		the name of a jQuery method, then that method will be used; otherwise it is
	 * 		assumed to be the name of a jQuery UI effect. When using a jQuery UI effect
	 * 		that supports additional settings, you may include those settings in the
	 * 		object and they will be passed to the effect. If <code>duration</code> or
	 * 		<code>easing</code> is omitted, then the default values will be used. If
	 * 		<code>effect</code> is omitted, then <code>"fadeOut"</code> will be
	 * 		used.</li></ul>
	 * @property mixed $Items <div><p>A selector indicating which items should show tooltips. Customize
	 * 		if you're using something other then the title attribute for the tooltip
	 * 		content, or if you need a different selector for event delegation.</p> 
	 * 						<p><em>When changing this option, you likely need to also change the
	 * 		<a><code>content</code></a> option.</em></p></div>
	 * @property mixed $Position <div><p>Configuration for the Position utility. The <code>of</code>
	 * 		property defaults to the target element, but can also be overriden.</p> 
	 * 						<p><em>Note: In 1.9.0, the default value was <code>{ my: "left+15
	 * 		center", at: "right center", collision: "flipfit" }</code>, but this was
	 * 		changed to more closely match native tooltip positioning.</em></p></div>
	 * @property mixed $Show <div>If and how to animate the showing of the
	 * 		tooltip.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Boolean</strong>:  			When set to
	 * 		<code>false</code>, no animation will be used and the tooltip will be shown
	 * 		immediately. 			When set to <code>true</code>, the tooltip will fade in
	 * 		with the default duration and the default easing.</li>
	 * 		<li><strong>Number</strong>:  			The tooltip will fade in with the
	 * 		specified duration and the default easing.</li>
	 * 		<li><strong>String</strong>:  			The tooltip will be shown using the
	 * 		specified effect. 			The value can either be the name of a built-in jQuery
	 * 		animateion method, such as <code>"slideDown"</code>, or the name of a
	 * 		jQuery UI effect, such as <code>"fold"</code>. 			In either case the effect
	 * 		will be used with the default duration and the default easing.</li>
	 * 		<li><strong>Object</strong>: If the value is an object, then
	 * 		<code>effect</code>, <code>duration</code>, and <code>easing</code>
	 * 		properties may be provided. If the <code>effect</code> property contains
	 * 		the name of a jQuery method, then that method will be used; otherwise it is
	 * 		assumed to be the name of a jQuery UI effect. When using a jQuery UI effect
	 * 		that supports additional settings, you may include those settings in the
	 * 		object and they will be passed to the effect. If <code>duration</code> or
	 * 		<code>easing</code> is omitted, then the default values will be used. If
	 * 		<code>effect</code> is omitted, then <code>"fadeIn"</code> will be
	 * 		used.</li></ul>
	 * @property string $TooltipClass <div>A class to add to the widget, can be used to display various tooltip
	 * 		types, like warnings or errors. 				<p>This may get replaced by the
	 * 		<a>classes option</a>.</p></div>
	 * @property boolean $Track <div>Whether the tooltip should track (follow) the mouse.</div>
	 */

	class QTooltipGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var mixed */
		protected $mixContent;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var mixed */
		protected $mixHide = null;
		/** @var mixed */
		protected $mixItems = null;
		/** @var mixed */
		protected $mixPosition = null;
		/** @var mixed */
		protected $mixShow = null;
		/** @var string */
		protected $strTooltipClass = null;
		/** @var boolean */
		protected $blnTrack = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Content', 'content');
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Hide', 'hide');
			$strJqOptions .= $this->makeJsProperty('Items', 'items');
			$strJqOptions .= $this->makeJsProperty('Position', 'position');
			$strJqOptions .= $this->makeJsProperty('Show', 'show');
			$strJqOptions .= $this->makeJsProperty('TooltipClass', 'tooltipClass');
			$strJqOptions .= $this->makeJsProperty('Track', 'track');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'tooltip';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * <div>Closes a tooltip. This is only intended to be called for non-delegated
		 * tooltips.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Close() {
			$this->CallJqUiMethod("close");
		}
		/**
		 * <div>Removes the tooltip functionality completely. This will return the
		 * element back to its pre-init state.</div><ul><li><div>This method does not
		 * accept any arguments.</div></li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * <div>Disables the tooltip.</div><ul><li><div>This method does not accept
		 * any arguments.</div></li></ul>
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * <div>Enables the tooltip.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * <div>Programmatically open a tooltip. This is only intended to be called
		 * for non-delegated tooltips.</div><ul><li><div>This method does not accept
		 * any arguments.</div></li></ul>
		 */
		public function Open() {
			$this->CallJqUiMethod("open");
		}
		/**
		 * <div>Gets the value currently associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * get.</div></li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod("option", $optionName);
		}
		/**
		 * <div>Gets an object containing key/value pairs representing the current
		 * tooltip options hash.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod("option");
		}
		/**
		 * <div>Sets the value of the tooltip option associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * set.</div></li> <li><div><strong>value</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A value to set for the option.</div></li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * <div>Sets one or more options for the
		 * tooltip.</div><ul><li><div><strong>options</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A map of option-value pairs to
		 * set.</div></li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod("option", $options);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Content': return $this->mixContent;
				case 'Disabled': return $this->blnDisabled;
				case 'Hide': return $this->mixHide;
				case 'Items': return $this->mixItems;
				case 'Position': return $this->mixPosition;
				case 'Show': return $this->mixShow;
				case 'TooltipClass': return $this->strTooltipClass;
				case 'Track': return $this->blnTrack;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Content':
					$this->mixContent = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'content', $mixValue);
					}
					break;

				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Hide':
					$this->mixHide = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'hide', $mixValue);
					}
					break;

				case 'Items':
					$this->mixItems = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'items', $mixValue);
					}
					break;

				case 'Position':
					$this->mixPosition = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'position', $mixValue);
					}
					break;

				case 'Show':
					$this->mixShow = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'show', $mixValue);
					}
					break;

				case 'TooltipClass':
					try {
						$this->strTooltipClass = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'tooltipClass', $this->strTooltipClass);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Track':
					try {
						$this->blnTrack = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'track', $this->blnTrack);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
