<?php
	/**
	 * The abstract QDialogGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QDialogBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QDialog class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * <div>Triggered when a dialog is about to close. If canceled, the dialog
	 * 		will not close.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QDialog_BeforeCloseEvent extends QJqUiEvent {
		const EventName = 'dialogbeforeclose';
	}
	/**
	 * <div>Triggered when the dialog is
	 * 		closed.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QDialog_CloseEvent extends QJqUiEvent {
		const EventName = 'dialogclose';
	}
	/**
	 * <div>Triggered when the dialog is
	 * 		created.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QDialog_CreateEvent extends QJqUiEvent {
		const EventName = 'dialogcreate';
	}
	/**
	 * <div>Triggered while the dialog is being
	 * 		dragged.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>position</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>offset</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current offset position of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_DragEvent extends QJqUiEvent {
		const EventName = 'dialogdrag';
	}
	/**
	 * <div>Triggered when the user starts dragging the
	 * 		dialog.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>position</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>offset</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current offset position of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_DragStartEvent extends QJqUiEvent {
		const EventName = 'dialogdragstart';
	}
	/**
	 * <div>Triggered after the dialog has been
	 * 		dragged.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>position</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>offset</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current offset position of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_DragStopEvent extends QJqUiEvent {
		const EventName = 'dialogdragstop';
	}
	/**
	 * <div>Triggered when the dialog gains
	 * 		focus.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QDialog_FocusEvent extends QJqUiEvent {
		const EventName = 'dialogfocus';
	}
	/**
	 * <div>Triggered when the dialog is
	 * 		opened.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div></li></ul>
	 */
	class QDialog_OpenEvent extends QJqUiEvent {
		const EventName = 'dialogopen';
	}
	/**
	 * <div>Triggered while the dialog is being
	 * 		resized.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>orginalPosition</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The CSS position of the dialog prior to being
	 * 		resized.</div></li> <li><div><strong>position</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>originalSize</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The size of the dialog prior to being resized.</div></li>
	 * 		<li><div><strong>size</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current size of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_ResizeEvent extends QJqUiEvent {
		const EventName = 'dialogresize';
	}
	/**
	 * <div>Triggered when the user starts resizing the
	 * 		dialog.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>orginalPosition</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The CSS position of the dialog prior to being
	 * 		resized.</div></li> <li><div><strong>position</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>originalSize</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The size of the dialog prior to being resized.</div></li>
	 * 		<li><div><strong>size</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current size of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_ResizeStartEvent extends QJqUiEvent {
		const EventName = 'dialogresizestart';
	}
	/**
	 * <div>Triggered after the dialog has been
	 * 		resized.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>orginalPosition</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The CSS position of the dialog prior to being
	 * 		resized.</div></li> <li><div><strong>position</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The current CSS position of the dialog.</div></li>
	 * 		<li><div><strong>originalSize</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The size of the dialog prior to being resized.</div></li>
	 * 		<li><div><strong>size</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div>The current size of the dialog.</div></li></ul></li></ul>
	 */
	class QDialog_ResizeStopEvent extends QJqUiEvent {
		const EventName = 'dialogresizestop';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property boolean $AutoOpen <div>If set to <code>true</code>, the dialog will automatically open upon
	 * 		initialization. If <code>false</code>, the dialog will stay hidden until
	 * 		the <a><code>open()</code></a> method is called.</div>
	 * @property mixed $Buttons <div>Specifies which buttons should be displayed on the dialog. The context
	 * 		of the callback is the dialog element; if you need access to the button, it
	 * 		is available as the target of the event object.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Object</strong>: The keys are the button
	 * 		labels and the values are the callbacks for when the associated button is
	 * 		clicked.</li> <li><strong>Array</strong>: Each element of the array must be
	 * 		an object defining the attributes, properties, and event handlers to set on
	 * 		the button.</li></ul>
	 * @property boolean $CloseOnEscape <div>Specifies whether the dialog should close when it has focus and the
	 * 		user presses the esacpe (ESC) key.</div>
	 * @property string $CloseText <div>Specifies the text for the close button. Note that the close text is
	 * 		visibly hidden when using a standard theme.</div>
	 * @property string $DialogClass <div>The specified class name(s) will be added to the dialog, for
	 * 		additional theming.</div>
	 * @property boolean $Draggable <div>If set to <code>true</code>, the dialog will be draggable by the title
	 * 		bar. Requires the <a>jQuery UI Draggable wiget</a> to be included.</div>
	 * @property mixed $Height <div>The height of the dialog.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: The height in
	 * 		pixels.</li> <li><strong>String</strong>: The only supported string value
	 * 		is <code>"auto"</code> which will allow the dialog height to adjust based
	 * 		on its content.</li></ul>
	 * @property mixed $Hide <div>If and how to animate the hiding of the dialog.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Number</strong>:  					The dialog
	 * 		will fade out while animating the height and width for the specified
	 * 		duration.</li> <li><strong>String</strong>:  					The dialog will be hidden
	 * 		using the specified jQuery UI effect. See the <a>list of effects</a> for
	 * 		possible values.</li> <li><strong>Object</strong>: If the value is an
	 * 		object, then <code>effect</code>, <code>duration</code>, and
	 * 		<code>easing</code> properties may be provided. The <code>effect</code>
	 * 		property must be the name of a jQuery UI effect. When using a jQuery UI
	 * 		effect that supports additional settings, you may include those settings in
	 * 		the object and they will be passed to the effect. If <code>duration</code>
	 * 		or <code>easing</code> is omitted, then the default values will be
	 * 		used.</li></ul>
	 * @property integer $MaxHeight <div>The maximum height to which the dialog can be resized, in
	 * 		pixels.</div>
	 * @property integer $MaxWidth <div>The maximum width to which the dialog can be resized, in pixels.</div>
	 * @property integer $MinHeight <div>The minimum height to which the dialog can be resized, in
	 * 		pixels.</div>
	 * @property integer $MinWidth <div>The minimum width to which the dialog can be resized, in pixels.</div>
	 * @property boolean $Modal <div>If set to <code>true</code>, the dialog will have modal behavior;
	 * 		other items on the page will be disabled, i.e., cannot be interacted with.
	 * 		Modal dialogs create an overlay below the dialog but above other page
	 * 		elements.</div>
	 * @property mixed $Position <div>Specifies where the dialog should be displayed. The dialog will handle
	 * 		collisions such that as much of the dialog is visible as
	 * 		possible.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Object</strong>: Identifies the position
	 * 		of the dialog when opened. The <code>of</code> option defaults to the
	 * 		window, but you can specify another element to position against. You can
	 * 		refer to the <a>jQuery UI Position</a> utility for more details about the
	 * 		various options.</li> <li><strong>String</strong>: A string representing
	 * 		the position within the viewport. Possible values: <code>"center"</code>,
	 * 		<code>"left"</code>, <code>"right"</code>, <code>"top"</code>,
	 * 		<code>"bottom"</code>.</li> <li><strong>Array</strong>: An array containing
	 * 		an <em>x, y</em> coordinate pair in pixel offset from the top left corner
	 * 		of the viewport or the name of a possible string value.</li></ul>
	 * @property boolean $Resizable <div>If set to <code>true</code>, the dialog will be resizable. Requires
	 * 		the <a>jQuery UI Resizable widget</a> to be included.</div>
	 * @property mixed $Show <div>If and how to animate the showing of the dialog.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Number</strong>:  					The dialog
	 * 		will fade in while animating the height and width for the specified
	 * 		duration.</li> <li><strong>String</strong>:  					The dialog will be shown
	 * 		using the specified jQuery UI effect. See the <a>list of effects</a> for
	 * 		possible values.</li> <li><strong>Object</strong>: If the value is an
	 * 		object, then <code>effect</code>, <code>duration</code>, and
	 * 		<code>easing</code> properties may be provided. The <code>effect</code>
	 * 		property must be the name of a jQuery UI effect. When using a jQuery UI
	 * 		effect that supports additional settings, you may include those settings in
	 * 		the object and they will be passed to the effect. If <code>duration</code>
	 * 		or <code>easing</code> is omitted, then the default values will be
	 * 		used.</li></ul>
	 * @property boolean $Stack <div>Specifies whether the dialog will stack on top of other dialogs. This
	 * 		will cause the dialog to move to the front of other dialogs when it gains
	 * 		focus.</div>
	 * @property string $Title <div>Specifies the title of the dialog. Any valid HTML may be set as the
	 * 		title. The title can also be specified by the <code>title</code> attribute
	 * 		on the dialog source element.</div>
	 * @property integer $Width <div>The width of the dialog, in pixels.</div>
	 * @property integer $ZIndex <div>The starting z-index for the dialog.</div>
	 */

	class QDialogGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnAutoOpen = null;
		/** @var mixed */
		protected $mixButtons = null;
		/** @var boolean */
		protected $blnCloseOnEscape = null;
		/** @var string */
		protected $strCloseText = null;
		/** @var string */
		protected $strDialogClass = null;
		/** @var boolean */
		protected $blnDraggable = null;
		/** @var mixed */
		protected $mixHeight = null;
		/** @var mixed */
		protected $mixHide = null;
		/** @var integer */
		protected $intMaxHeight = null;
		/** @var integer */
		protected $intMaxWidth = null;
		/** @var integer */
		protected $intMinHeight = null;
		/** @var integer */
		protected $intMinWidth = null;
		/** @var boolean */
		protected $blnModal = null;
		/** @var mixed */
		protected $mixPosition = null;
		/** @var boolean */
		protected $blnResizable = null;
		/** @var mixed */
		protected $mixShow = null;
		/** @var boolean */
		protected $blnStack = null;
		/** @var string */
		protected $strTitle = null;
		/** @var integer */
		protected $intWidth = null;
		/** @var integer */
		protected $intZIndex = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('AutoOpen', 'autoOpen');
			$strJqOptions .= $this->makeJsProperty('Buttons', 'buttons');
			$strJqOptions .= $this->makeJsProperty('CloseOnEscape', 'closeOnEscape');
			$strJqOptions .= $this->makeJsProperty('CloseText', 'closeText');
			$strJqOptions .= $this->makeJsProperty('DialogClass', 'dialogClass');
			$strJqOptions .= $this->makeJsProperty('Draggable', 'draggable');
			$strJqOptions .= $this->makeJsProperty('Height', 'height');
			$strJqOptions .= $this->makeJsProperty('Hide', 'hide');
			$strJqOptions .= $this->makeJsProperty('MaxHeight', 'maxHeight');
			$strJqOptions .= $this->makeJsProperty('MaxWidth', 'maxWidth');
			$strJqOptions .= $this->makeJsProperty('MinHeight', 'minHeight');
			$strJqOptions .= $this->makeJsProperty('MinWidth', 'minWidth');
			$strJqOptions .= $this->makeJsProperty('Modal', 'modal');
			$strJqOptions .= $this->makeJsProperty('Position', 'position');
			$strJqOptions .= $this->makeJsProperty('Resizable', 'resizable');
			$strJqOptions .= $this->makeJsProperty('Show', 'show');
			$strJqOptions .= $this->makeJsProperty('Stack', 'stack');
			$strJqOptions .= $this->makeJsProperty('Title', 'title');
			$strJqOptions .= $this->makeJsProperty('Width', 'width');
			$strJqOptions .= $this->makeJsProperty('ZIndex', 'zIndex');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'dialog';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * <div>Closes the dialog.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Close() {
			$this->CallJqUiMethod("close");
		}
		/**
		 * <div>Removes the dialog functionality completely. This will return the
		 * element back to its pre-init state.</div><ul><li><div>This method does not
		 * accept any arguments.</div></li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * <div>Whether the dialog is currently open.</div><ul><li><div>This method
		 * does not accept any arguments.</div></li></ul>
		 */
		public function IsOpen() {
			$this->CallJqUiMethod("isOpen");
		}
		/**
		 * <div>Moves the dialog to the top of the dialog
		 * stack.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function MoveToTop() {
			$this->CallJqUiMethod("moveToTop");
		}
		/**
		 * <div>Opens the dialog.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Open() {
			$this->CallJqUiMethod("open");
		}
		/**
		 * <div>Gets the value currently associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * get.</div></li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod("option", $optionName);
		}
		/**
		 * <div>Gets an object containing key/value pairs representing the current
		 * dialog options hash.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod("option");
		}
		/**
		 * <div>Sets the value of the dialog option associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * set.</div></li> <li><div><strong>value</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A value to set for the option.</div></li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * <div>Sets one or more options for the
		 * dialog.</div><ul><li><div><strong>options</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A map of option-value pairs to
		 * set.</div></li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod("option", $options);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'AutoOpen': return $this->blnAutoOpen;
				case 'Buttons': return $this->mixButtons;
				case 'CloseOnEscape': return $this->blnCloseOnEscape;
				case 'CloseText': return $this->strCloseText;
				case 'DialogClass': return $this->strDialogClass;
				case 'Draggable': return $this->blnDraggable;
				case 'Height': return $this->mixHeight;
				case 'Hide': return $this->mixHide;
				case 'MaxHeight': return $this->intMaxHeight;
				case 'MaxWidth': return $this->intMaxWidth;
				case 'MinHeight': return $this->intMinHeight;
				case 'MinWidth': return $this->intMinWidth;
				case 'Modal': return $this->blnModal;
				case 'Position': return $this->mixPosition;
				case 'Resizable': return $this->blnResizable;
				case 'Show': return $this->mixShow;
				case 'Stack': return $this->blnStack;
				case 'Title': return $this->strTitle;
				case 'Width': return $this->intWidth;
				case 'ZIndex': return $this->intZIndex;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'AutoOpen':
					try {
						$this->blnAutoOpen = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'autoOpen', $this->blnAutoOpen);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Buttons':
					$this->mixButtons = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'buttons', $mixValue);
					}
					break;

				case 'CloseOnEscape':
					try {
						$this->blnCloseOnEscape = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'closeOnEscape', $this->blnCloseOnEscape);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CloseText':
					try {
						$this->strCloseText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'closeText', $this->strCloseText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DialogClass':
					try {
						$this->strDialogClass = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dialogClass', $this->strDialogClass);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Draggable':
					try {
						$this->blnDraggable = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'draggable', $this->blnDraggable);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Height':
					$this->mixHeight = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'height', $mixValue);
					}
					break;

				case 'Hide':
					$this->mixHide = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'hide', $mixValue);
					}
					break;

				case 'MaxHeight':
					try {
						$this->intMaxHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'maxHeight', $this->intMaxHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxWidth':
					try {
						$this->intMaxWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'maxWidth', $this->intMaxWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinHeight':
					try {
						$this->intMinHeight = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minHeight', $this->intMinHeight);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MinWidth':
					try {
						$this->intMinWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'minWidth', $this->intMinWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Modal':
					try {
						$this->blnModal = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'modal', $this->blnModal);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Position':
					$this->mixPosition = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'position', $mixValue);
					}
					break;

				case 'Resizable':
					try {
						$this->blnResizable = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'resizable', $this->blnResizable);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Show':
					$this->mixShow = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'show', $mixValue);
					}
					break;

				case 'Stack':
					try {
						$this->blnStack = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stack', $this->blnStack);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Title':
					try {
						$this->strTitle = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'title', $this->strTitle);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Width':
					try {
						$this->intWidth = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'width', $this->intWidth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ZIndex':
					try {
						$this->intZIndex = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'zIndex', $this->intZIndex);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
