<?php
	/**
	 * The abstract QDatepickerBoxGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QDatepickerBoxBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QDatepickerBox class file.
	 *
	 */

	/* Custom event classes for this control */
	
	

	/* Custom "property" event classes for this control */
	/**
	 * <div><strong>Default:</strong><code>null</code></div><div>A function that
	 * 		takes an input field and current datepicker instance and returns an options
	 * 		object to update the datepicker with. It is called just before the
	 * 		datepicker is displayed.</div>
	 */
	class QDatepickerBox_BeforeShowEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_BeforeShow';
		protected $strJqProperty = 'beforeShow';
	}

	/**
	 * <div><strong>Default:</strong><code>null</code></div><div>A function takes
	 * 		a date as a parameter and must return an array with <code>[0]</code> equal
	 * 		to <code>true</code>/<code>false</code> indicating whether or not this date
	 * 		is selectable, <code>[1]</code> equal to a CSS class name or
	 * 		<code>""</code> for the default presentation, and <code>[2]</code> an
	 * 		optional popup tooltip for this date. It is called for each day in the
	 * 		datepicker before it is displayed.</div>
	 */
	class QDatepickerBox_BeforeShowDayEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_BeforeShowDay';
		protected $strJqProperty = 'beforeShowDay';
	}

	/**
	 * <div><strong>Default:</strong><code>jQuery.datepicker.iso8601Week</code></div><div>A
	 * 		function to calculate the week of the year for a given date. The default
	 * 		implementation uses the ISO 8601 definition: weeks start on a Monday; the
	 * 		first week of the year contains the first Thursday of the year.</div>
	 */
	class QDatepickerBox_CalculateWeekEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_CalculateWeek';
		protected $strJqProperty = 'calculateWeek';
	}

	/**
	 * <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker moves to a new month and/or year. The function receives the
	 * 		selected year, month (1-12), and the datepicker instance as parameters.
	 * 		<code>this</code> refers to the associated input field.</div>
	 */
	class QDatepickerBox_ChangeMonthYearEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_ChangeMonthYear';
		protected $strJqProperty = 'onChangeMonthYear';
	}

	/**
	 * <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker is closed, whether or not a date is selected. The function
	 * 		receives the selected date as text (<code>""</code> if none) and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.</div>
	 */
	class QDatepickerBox_CloseEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_Close';
		protected $strJqProperty = 'onClose';
	}

	/**
	 * <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker is selected. The function receives the selected date as text and
	 * 		the datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.</div>
	 */
	class QDatepickerBox_SelectEvent extends QJqUiPropertyEvent {
		const EventName = 'QDatepickerBox_Select';
		protected $strJqProperty = 'onSelect';
	}


	/**
	 * @property mixed $AltField <div>An input element that is to be updated with the selected date from the
	 * 		datepicker. Use the <a><code>altFormat</code></a> option to change the
	 * 		format of the date within this field. Leave as blank for no alternate
	 * 		field.</div>
	 * @property string $AltFormat <div>The <a><code>dateFormat</code></a> to be used for the
	 * 		<a><code>altField</code></a> option. This allows one date format to be
	 * 		shown to the user for selection purposes, while a different format is
	 * 		actually sent behind the scenes. For a full list of the possible formats
	 * 		see the [[UI/Datepicker/formatDate|formatDate]] function</div>
	 * @property string $AppendText <div>The text to display after each date field, e.g., to show the required
	 * 		format.</div>
	 * @property boolean $AutoSize <div>Set to <code>true</code> to automatically resize the input field to
	 * 		accommodate dates in the current <a><code>dateFormat</code></a>.</div>
	 * @property QJsClosure $OnBeforeShow <div><strong>Default:</strong><code>null</code></div><div>A function that
	 * 		takes an input field and current datepicker instance and returns an options
	 * 		object to update the datepicker with. It is called just before the
	 * 		datepicker is displayed.</div>
	 * @property QJsClosure $OnBeforeShowDay <div><strong>Default:</strong><code>null</code></div><div>A function takes
	 * 		a date as a parameter and must return an array with <code>[0]</code> equal
	 * 		to <code>true</code>/<code>false</code> indicating whether or not this date
	 * 		is selectable, <code>[1]</code> equal to a CSS class name or
	 * 		<code>""</code> for the default presentation, and <code>[2]</code> an
	 * 		optional popup tooltip for this date. It is called for each day in the
	 * 		datepicker before it is displayed.</div>
	 * @property string $ButtonImage <div>The URL for the popup button image. If set, the
	 * 		<a><code>buttonText</code></a> option becomes the <code>alt</code> value
	 * 		and is not directly displayed.</div>
	 * @property boolean $ButtonImageOnly <div>Whether the button image should be rendered by itself instead of
	 * 		inside a button element.</div>
	 * @property string $ButtonText <div>The text to display on the trigger button. Use in conjunction with the
	 * 		<a><code>showOn</code></a> option set to <code>"button"</code> or
	 * 		<code>"both"</code>.</div>
	 * @property QJsClosure $OnCalculateWeek <div><strong>Default:</strong><code>jQuery.datepicker.iso8601Week</code></div><div>A
	 * 		function to calculate the week of the year for a given date. The default
	 * 		implementation uses the ISO 8601 definition: weeks start on a Monday; the
	 * 		first week of the year contains the first Thursday of the year.</div>
	 * @property boolean $ChangeMonth <div>Whether the month should be rendered as a dropdown instead of
	 * 		text.</div>
	 * @property boolean $ChangeYear <div>Whether the year should be rendered as a dropdown instead of text. Use
	 * 		the <a><code>yearRange</code></a> option to control which years are made
	 * 		available for selection.</div>
	 * @property string $CloseText <div>The text to display for the close link. Use the
	 * 		<a><code>showButtonPanel</code></a> option to display this button.</div>
	 * @property boolean $ConstrainInput <div>When <code>true</code>, entry in the input field is constrained to
	 * 		those characters allowed by the current <a><code>dateFormat</code></a>
	 * 		option.</div>
	 * @property string $CurrentText <div>The text to display for the current day link. Use the
	 * 		<a><code>showButtonPanel</code></a> option to display this button.</div>
	 * @property string $JqDateFormat <div>The format for parsed and displayed dates. For a full list of the
	 * 		possible formats see the
	 * 		<code>[[UI/Datepicker/formatDate|formatDate]]</code> function.</div>
	 * @property array $DayNames <div>The list of long day names, starting from Sunday, for use as requested
	 * 		via the <a><code>dateFormat</code></a> option.</div>
	 * @property array $DayNamesMin <div>The list of minimised day names, starting from Sunday, for use as
	 * 		column headers within the datepicker.</div>
	 * @property array $DayNamesShort <div>The list of abbreviated day names, starting from Sunday, for use as
	 * 		requested via the <a><code>dateFormat</code></a> option.</div>
	 * @property mixed $DefaultDate <div>Set the date to highlight on first opening if the field is blank.
	 * 		Specify either an actual date via a Date object or as a string in the
	 * 		current <code>[[UI/Datepicker#option-dateFormat|dateFormat]]</code>, or a
	 * 		number of days from today (e.g. +7) or a string of values and periods ('y'
	 * 		for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or
	 * 		null for today.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the default date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>"y"</code> for years, <code>"m"</code> for months,
	 * 		<code>"w"</code> for weeks, and <code>"d"</code> for days. For example,
	 * 		<code>"+1m +7d"</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property mixed $Duration <div>Control the speed at which the datepicker appears, it may be a time in
	 * 		milliseconds or a string representing one of the three predefined speeds
	 * 		("slow", "normal", "fast").</div>
	 * @property integer $FirstDay <div>Set the first day of the week: Sunday is <code>0</code>, Monday is
	 * 		<code>1</code>, etc.</div>
	 * @property boolean $GotoCurrent <div>When <code>true</code>, the current day link moves to the currently
	 * 		selected date instead of today.</div>
	 * @property boolean $HideIfNoPrevNext <div>Normally the previous and next links are disabled when not applicable
	 * 		(see the <a><code>minDate</code></a> and <a><code>maxDate</code></a>
	 * 		options). You can hide them altogether by setting this attribute to
	 * 		<code>true</code>.</div>
	 * @property boolean $IsRTL <div>Whether the current language is drawn from right to left.</div>
	 * @property mixed $MaxDate <div>The maximum selectable date. When set to <code>null</code>, there is
	 * 		no maximum.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the maximum date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>"y"</code> for years, <code>"m"</code> for months,
	 * 		<code>"w"</code> for weeks, and <code>"d"</code> for days. For example,
	 * 		<code>"+1m +7d"</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property mixed $MinDate <div>The minimum selectable date. When set to <code>null</code>, there is
	 * 		no minimum.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Date</strong>: A date object containing
	 * 		the minimum date.</li> <li><strong>Number</strong>: A number of days from
	 * 		today. For example <code>2</code> represents two days from today and
	 * 		<code>-1</code> represents yesterday.</li> <li><strong>String</strong>: A
	 * 		string in the format defined by the <a><code>dateFormat</code></a> option,
	 * 		or a relative date. Relative dates must contain value and period pairs;
	 * 		valid periods are <code>"y"</code> for years, <code>"m"</code> for months,
	 * 		<code>"w"</code> for weeks, and <code>"d"</code> for days. For example,
	 * 		<code>"+1m +7d"</code> represents one month and seven days from
	 * 		today.</li></ul>
	 * @property array $MonthNames <div>The list of full month names, for use as requested via the
	 * 		<a><code>dateFormat</code></a> option.</div>
	 * @property array $MonthNamesShort <div>The list of abbreviated month names, as used in the month header on
	 * 		each datepicker and as requested via the <a><code>dateFormat</code></a>
	 * 		option.</div>
	 * @property boolean $NavigationAsDateFormat <div>Whether the <a><code>prevText</code></a> and
	 * 		<a><code>nextText</code></a> options should be parsed as dates by the
	 * 		<code>[[UI/Datepicker/formatDate|formatDate]]</code> function, allowing
	 * 		them to display the target month names for example.</div>
	 * @property string $NextText <div>The text to display for the next month link. With the standard
	 * 		ThemeRoller styling, this value is replaced by an icon.</div>
	 * @property mixed $NumberOfMonths <div>The number of months to show at once.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: The number of months to
	 * 		display in a single row.</li> <li><strong>Array</strong>: An array defining
	 * 		the number of rows and columns to display.</li></ul>
	 * @property QJsClosure $OnChangeMonthYear <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker moves to a new month and/or year. The function receives the
	 * 		selected year, month (1-12), and the datepicker instance as parameters.
	 * 		<code>this</code> refers to the associated input field.</div>
	 * @property QJsClosure $OnClose <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker is closed, whether or not a date is selected. The function
	 * 		receives the selected date as text (<code>""</code> if none) and the
	 * 		datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.</div>
	 * @property QJsClosure $OnSelect <div><strong>Default:</strong><code>null</code></div><div>Called when the
	 * 		datepicker is selected. The function receives the selected date as text and
	 * 		the datepicker instance as parameters. <code>this</code> refers to the
	 * 		associated input field.</div>
	 * @property string $PrevText <div>The text to display for the previous month link. With the standard
	 * 		ThemeRoller styling, this value is replaced by an icon.</div>
	 * @property boolean $SelectOtherMonths <div>Whether days in other months shown before or after the current month
	 * 		are selectable. This only applies if the
	 * 		<a><code>showOtherMonths</code></a> option is set to
	 * 		<code>true</code>.</div>
	 * @property mixed $ShortYearCutoff <div>The cutoff year for determining the century for a date (used in
	 * 		conjunction with
	 * 		<code>[[UI/Datepicker#option-dateFormat|dateFormat]]</code> 'y'). Any dates
	 * 		entered with a year value less than or equal to the cutoff year are
	 * 		considered to be in the current century, while those greater than it are
	 * 		deemed to be in the previous century.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Number</strong>: A value between
	 * 		<code>0</code> and <code>99</code> indicating the cutoff year.</li>
	 * 		<li><strong>String</strong>: A relative number of years from the current
	 * 		year, e.g., <code>"+3"</code> or <code>"-5"</code>.</li></ul>
	 * @property string $ShowAnim <div>The name of the animation used to show and hide the datepicker. Use
	 * 		<code>"show"</code> (the default), <code>"slideDown"</code>,
	 * 		<code>"fadeIn"</code>, any of the <a>jQuery UI effects</a>. Set to an empty
	 * 		string to disable animation.</div>
	 * @property boolean $ShowButtonPanel <div>Whether to show the button panel.</div>
	 * @property integer $ShowCurrentAtPos <div>When displaying multiple months via the
	 * 		<a><code>numberOfMonths</code></a> option, the
	 * 		<code>showCurrentAtPos</code> option defines which position to display the
	 * 		current month in.</div>
	 * @property boolean $ShowMonthAfterYear <div>Whether to show the month after the year in the header.</div>
	 * @property string $ShowOn <div>When the datepicker should appear. The datepicker can appear when the
	 * 		field receives focus (<code>"focus"</code>), when a button is clicked
	 * 		(<code>"button"</code>), or when either event occurs
	 * 		(<code>"both"</code>).</div>
	 * @property mixed $ShowOptions <div>If using one of the jQuery UI effects for the
	 * 		<a><code>showAnim</code></a> option, you can provide additional settings
	 * 		for that animation via this option.</div>
	 * @property boolean $ShowOtherMonths <div>Whether to display dates in other months (non-selectable) at the start
	 * 		or end of the current month. To make these days selectable use the
	 * 		<a><code>selectOtherMonths</code></a> option.</div>
	 * @property boolean $ShowWeek <div>When <code>true</code>, a column is added to show the week of the
	 * 		year. The <a><code>calculateWeek</code></a> option determines how the week
	 * 		of the year is calculated. You may also want to change the
	 * 		<a><code>firstDay</code></a> option.</div>
	 * @property integer $StepMonths <div>Set how many months to move when clicking the previous/next
	 * 		links.</div>
	 * @property string $WeekHeader <div>The text to display for the week of the year column heading. Use the
	 * 		<a><code>showWeek</code></a> option to display this column.</div>
	 * @property string $YearRange <div>The range of years displayed in the year drop-down: either relative to
	 * 		today's year (<code>"-nn:+nn"</code>), relative to the currently selected
	 * 		year (<code>"c-nn:c+nn"</code>), absolute (<code>"nnnn:nnnn"</code>), or
	 * 		combinations of these formats (<code>"nnnn:-nn"</code>). Note that this
	 * 		option only affects what appears in the drop-down, to restrict which dates
	 * 		may be selected use the <a><code>minDate</code></a> and/or
	 * 		<a><code>maxDate</code></a> options.</div>
	 * @property string $YearSuffix <div>Additional text to display after the year in the month headers.</div>
	 */

	class QDatepickerBoxGen extends QTextBox	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var mixed */
		protected $mixAltField = null;
		/** @var string */
		protected $strAltFormat = null;
		/** @var string */
		protected $strAppendText = null;
		/** @var boolean */
		protected $blnAutoSize = null;
		/** @var QJsClosure */
		protected $mixOnBeforeShow = null;
		/** @var QJsClosure */
		protected $mixOnBeforeShowDay = null;
		/** @var string */
		protected $strButtonImage = null;
		/** @var boolean */
		protected $blnButtonImageOnly = null;
		/** @var string */
		protected $strButtonText = null;
		/** @var QJsClosure */
		protected $mixOnCalculateWeek = null;
		/** @var boolean */
		protected $blnChangeMonth = null;
		/** @var boolean */
		protected $blnChangeYear = null;
		/** @var string */
		protected $strCloseText = null;
		/** @var boolean */
		protected $blnConstrainInput = null;
		/** @var string */
		protected $strCurrentText = null;
		/** @var string */
		protected $strJqDateFormat = null;
		/** @var array */
		protected $arrDayNames = null;
		/** @var array */
		protected $arrDayNamesMin = null;
		/** @var array */
		protected $arrDayNamesShort = null;
		/** @var mixed */
		protected $mixDefaultDate = null;
		/** @var mixed */
		protected $mixDuration = null;
		/** @var integer */
		protected $intFirstDay;
		/** @var boolean */
		protected $blnGotoCurrent = null;
		/** @var boolean */
		protected $blnHideIfNoPrevNext = null;
		/** @var boolean */
		protected $blnIsRTL = null;
		/** @var mixed */
		protected $mixMaxDate = null;
		/** @var mixed */
		protected $mixMinDate = null;
		/** @var array */
		protected $arrMonthNames = null;
		/** @var array */
		protected $arrMonthNamesShort = null;
		/** @var boolean */
		protected $blnNavigationAsDateFormat = null;
		/** @var string */
		protected $strNextText = null;
		/** @var mixed */
		protected $mixNumberOfMonths = null;
		/** @var QJsClosure */
		protected $mixOnChangeMonthYear = null;
		/** @var QJsClosure */
		protected $mixOnClose = null;
		/** @var QJsClosure */
		protected $mixOnSelect = null;
		/** @var string */
		protected $strPrevText = null;
		/** @var boolean */
		protected $blnSelectOtherMonths = null;
		/** @var mixed */
		protected $mixShortYearCutoff = null;
		/** @var string */
		protected $strShowAnim = null;
		/** @var boolean */
		protected $blnShowButtonPanel = null;
		/** @var integer */
		protected $intShowCurrentAtPos;
		/** @var boolean */
		protected $blnShowMonthAfterYear = null;
		/** @var string */
		protected $strShowOn = null;
		/** @var mixed */
		protected $mixShowOptions = null;
		/** @var boolean */
		protected $blnShowOtherMonths = null;
		/** @var boolean */
		protected $blnShowWeek = null;
		/** @var integer */
		protected $intStepMonths = null;
		/** @var string */
		protected $strWeekHeader = null;
		/** @var string */
		protected $strYearRange = null;
		/** @var string */
		protected $strYearSuffix = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('AltField', 'altField');
			$strJqOptions .= $this->makeJsProperty('AltFormat', 'altFormat');
			$strJqOptions .= $this->makeJsProperty('AppendText', 'appendText');
			$strJqOptions .= $this->makeJsProperty('AutoSize', 'autoSize');
			$strJqOptions .= $this->makeJsProperty('OnBeforeShow', 'beforeShow');
			$strJqOptions .= $this->makeJsProperty('OnBeforeShowDay', 'beforeShowDay');
			$strJqOptions .= $this->makeJsProperty('ButtonImage', 'buttonImage');
			$strJqOptions .= $this->makeJsProperty('ButtonImageOnly', 'buttonImageOnly');
			$strJqOptions .= $this->makeJsProperty('ButtonText', 'buttonText');
			$strJqOptions .= $this->makeJsProperty('OnCalculateWeek', 'calculateWeek');
			$strJqOptions .= $this->makeJsProperty('ChangeMonth', 'changeMonth');
			$strJqOptions .= $this->makeJsProperty('ChangeYear', 'changeYear');
			$strJqOptions .= $this->makeJsProperty('CloseText', 'closeText');
			$strJqOptions .= $this->makeJsProperty('ConstrainInput', 'constrainInput');
			$strJqOptions .= $this->makeJsProperty('CurrentText', 'currentText');
			$strJqOptions .= $this->makeJsProperty('JqDateFormat', 'dateFormat');
			$strJqOptions .= $this->makeJsProperty('DayNames', 'dayNames');
			$strJqOptions .= $this->makeJsProperty('DayNamesMin', 'dayNamesMin');
			$strJqOptions .= $this->makeJsProperty('DayNamesShort', 'dayNamesShort');
			$strJqOptions .= $this->makeJsProperty('DefaultDate', 'defaultDate');
			$strJqOptions .= $this->makeJsProperty('Duration', 'duration');
			$strJqOptions .= $this->makeJsProperty('FirstDay', 'firstDay');
			$strJqOptions .= $this->makeJsProperty('GotoCurrent', 'gotoCurrent');
			$strJqOptions .= $this->makeJsProperty('HideIfNoPrevNext', 'hideIfNoPrevNext');
			$strJqOptions .= $this->makeJsProperty('IsRTL', 'isRTL');
			$strJqOptions .= $this->makeJsProperty('MaxDate', 'maxDate');
			$strJqOptions .= $this->makeJsProperty('MinDate', 'minDate');
			$strJqOptions .= $this->makeJsProperty('MonthNames', 'monthNames');
			$strJqOptions .= $this->makeJsProperty('MonthNamesShort', 'monthNamesShort');
			$strJqOptions .= $this->makeJsProperty('NavigationAsDateFormat', 'navigationAsDateFormat');
			$strJqOptions .= $this->makeJsProperty('NextText', 'nextText');
			$strJqOptions .= $this->makeJsProperty('NumberOfMonths', 'numberOfMonths');
			$strJqOptions .= $this->makeJsProperty('OnChangeMonthYear', 'onChangeMonthYear');
			$strJqOptions .= $this->makeJsProperty('OnClose', 'onClose');
			$strJqOptions .= $this->makeJsProperty('OnSelect', 'onSelect');
			$strJqOptions .= $this->makeJsProperty('PrevText', 'prevText');
			$strJqOptions .= $this->makeJsProperty('SelectOtherMonths', 'selectOtherMonths');
			$strJqOptions .= $this->makeJsProperty('ShortYearCutoff', 'shortYearCutoff');
			$strJqOptions .= $this->makeJsProperty('ShowAnim', 'showAnim');
			$strJqOptions .= $this->makeJsProperty('ShowButtonPanel', 'showButtonPanel');
			$strJqOptions .= $this->makeJsProperty('ShowCurrentAtPos', 'showCurrentAtPos');
			$strJqOptions .= $this->makeJsProperty('ShowMonthAfterYear', 'showMonthAfterYear');
			$strJqOptions .= $this->makeJsProperty('ShowOn', 'showOn');
			$strJqOptions .= $this->makeJsProperty('ShowOptions', 'showOptions');
			$strJqOptions .= $this->makeJsProperty('ShowOtherMonths', 'showOtherMonths');
			$strJqOptions .= $this->makeJsProperty('ShowWeek', 'showWeek');
			$strJqOptions .= $this->makeJsProperty('StepMonths', 'stepMonths');
			$strJqOptions .= $this->makeJsProperty('WeekHeader', 'weekHeader');
			$strJqOptions .= $this->makeJsProperty('YearRange', 'yearRange');
			$strJqOptions .= $this->makeJsProperty('YearSuffix', 'yearSuffix');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'datepicker';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * <div>Removes the datepicker functionality completely. This will return the
		 * element back to its pre-init state.</div><ul><li><div>This method does not
		 * accept any arguments.</div></li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * <div>Opens the datepicker in a dialog
		 * box.</div><ul><li><div><strong>date</strong></div> <div>Type: <a>String</a>
		 * or <a>Date</a></div> <div>The initial date.</div></li>
		 * <li><div><strong>onSelect</strong></div> <div>Type: <a>Function</a>()</div>
		 * <div>A callback function when a date is selected. The function receives the
		 * date text and date picker instance as parameters.</div></li>
		 * <li><div><strong>settings</strong></div> <div>Type: <a>Options</a></div>
		 * <div>The new settings for the date picker.</div></li>
		 * <li><div><strong>pos</strong></div> <div>Type: <a>Number[2] or
		 * MouseEvent</a></div> <div>The position of the top/left of the dialog as
		 * <code>[x, y]</code> or a <code>MouseEvent</code> that contains the
		 * coordinates. If not specified the dialog is centered on the
		 * screen.</div></li></ul>
		 * @param $date
		 * @param $onSelect
		 * @param $settings
		 * @param $pos
		 */
		public function Dialog($date, $onSelect = null, $settings = null, $pos = null) {
			$this->CallJqUiMethod("dialog", $date, $onSelect, $settings, $pos);
		}
		/**
		 * <div>Returns the current date for the datepicker or <code>null</code> if no
		 * date has been selected.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function GetDate() {
			$this->CallJqUiMethod("getDate");
		}
		/**
		 * <div>Close a previously opened date picker.</div><ul><li><div>This method
		 * does not accept any arguments.</div></li></ul>
		 */
		public function Hide() {
			$this->CallJqUiMethod("hide");
		}
		/**
		 * <div>Determine whether a date picker has been
		 * disabled.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function IsDisabled() {
			$this->CallJqUiMethod("isDisabled");
		}
		/**
		 * <div>Gets the value currently associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * get.</div></li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod("option", $optionName);
		}
		/**
		 * <div>Gets an object containing key/value pairs representing the current
		 * datepicker options hash.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod("option");
		}
		/**
		 * <div>Sets the value of the datepicker option associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * set.</div></li> <li><div><strong>value</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A value to set for the option.</div></li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * <div>Sets one or more options for the
		 * datepicker.</div><ul><li><div><strong>options</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A map of option-value pairs to
		 * set.</div></li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * <div>Redraw the date picker, after having made some external
		 * modifications.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Refresh() {
			$this->CallJqUiMethod("refresh");
		}
		/**
		 * <div>Sets the date for the datepicker. The new date may be a
		 * <code>Date</code> object or a string in the current <a>date format</a>
		 * (e.g., <code>"01/26/2009"</code>), a number of days from today (e.g.,
		 * <code>+7</code>) or a string of values and periods (<code>"y"</code> for
		 * years, <code>"m"</code> for months, <code>"w"</code> for weeks,
		 * <code>"d"</code> for days, e.g., <code>"+1m +7d"</code>), or
		 * <code>null</code> to clear the selected
		 * date.</div><ul><li><div><strong>date</strong></div> <div>Type:
		 * <a>String</a> or <a>Date</a></div> <div>The new date.</div></li></ul>
		 * @param $date
		 */
		public function SetDate($date) {
			$this->CallJqUiMethod("setDate", $date);
		}
		/**
		 * <div>Open the date picker. If the datepicker is attached to an input, the
		 * input must be visible for the datepicker to be
		 * shown.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Show() {
			$this->CallJqUiMethod("show");
		}


		public function __get($strName) {
			switch ($strName) {
				case 'AltField': return $this->mixAltField;
				case 'AltFormat': return $this->strAltFormat;
				case 'AppendText': return $this->strAppendText;
				case 'AutoSize': return $this->blnAutoSize;
				case 'OnBeforeShow': return $this->mixOnBeforeShow;
				case 'OnBeforeShowDay': return $this->mixOnBeforeShowDay;
				case 'ButtonImage': return $this->strButtonImage;
				case 'ButtonImageOnly': return $this->blnButtonImageOnly;
				case 'ButtonText': return $this->strButtonText;
				case 'OnCalculateWeek': return $this->mixOnCalculateWeek;
				case 'ChangeMonth': return $this->blnChangeMonth;
				case 'ChangeYear': return $this->blnChangeYear;
				case 'CloseText': return $this->strCloseText;
				case 'ConstrainInput': return $this->blnConstrainInput;
				case 'CurrentText': return $this->strCurrentText;
				case 'JqDateFormat': return $this->strJqDateFormat;
				case 'DayNames': return $this->arrDayNames;
				case 'DayNamesMin': return $this->arrDayNamesMin;
				case 'DayNamesShort': return $this->arrDayNamesShort;
				case 'DefaultDate': return $this->mixDefaultDate;
				case 'Duration': return $this->mixDuration;
				case 'FirstDay': return $this->intFirstDay;
				case 'GotoCurrent': return $this->blnGotoCurrent;
				case 'HideIfNoPrevNext': return $this->blnHideIfNoPrevNext;
				case 'IsRTL': return $this->blnIsRTL;
				case 'MaxDate': return $this->mixMaxDate;
				case 'MinDate': return $this->mixMinDate;
				case 'MonthNames': return $this->arrMonthNames;
				case 'MonthNamesShort': return $this->arrMonthNamesShort;
				case 'NavigationAsDateFormat': return $this->blnNavigationAsDateFormat;
				case 'NextText': return $this->strNextText;
				case 'NumberOfMonths': return $this->mixNumberOfMonths;
				case 'OnChangeMonthYear': return $this->mixOnChangeMonthYear;
				case 'OnClose': return $this->mixOnClose;
				case 'OnSelect': return $this->mixOnSelect;
				case 'PrevText': return $this->strPrevText;
				case 'SelectOtherMonths': return $this->blnSelectOtherMonths;
				case 'ShortYearCutoff': return $this->mixShortYearCutoff;
				case 'ShowAnim': return $this->strShowAnim;
				case 'ShowButtonPanel': return $this->blnShowButtonPanel;
				case 'ShowCurrentAtPos': return $this->intShowCurrentAtPos;
				case 'ShowMonthAfterYear': return $this->blnShowMonthAfterYear;
				case 'ShowOn': return $this->strShowOn;
				case 'ShowOptions': return $this->mixShowOptions;
				case 'ShowOtherMonths': return $this->blnShowOtherMonths;
				case 'ShowWeek': return $this->blnShowWeek;
				case 'StepMonths': return $this->intStepMonths;
				case 'WeekHeader': return $this->strWeekHeader;
				case 'YearRange': return $this->strYearRange;
				case 'YearSuffix': return $this->strYearSuffix;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'AltField':
					$this->mixAltField = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'altField', $mixValue);
					}
					break;

				case 'AltFormat':
					try {
						$this->strAltFormat = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'altFormat', $this->strAltFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AppendText':
					try {
						$this->strAppendText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'appendText', $this->strAppendText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AutoSize':
					try {
						$this->blnAutoSize = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'autoSize', $this->blnAutoSize);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnBeforeShow':
					try {
						$this->mixOnBeforeShow = new QJsClosure($mixValue, array("input","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnBeforeShowDay':
					try {
						$this->mixOnBeforeShowDay = new QJsClosure($mixValue, array("date"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonImage':
					try {
						$this->strButtonImage = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'buttonImage', $this->strButtonImage);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonImageOnly':
					try {
						$this->blnButtonImageOnly = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'buttonImageOnly', $this->blnButtonImageOnly);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ButtonText':
					try {
						$this->strButtonText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'buttonText', $this->strButtonText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnCalculateWeek':
					try {
						$this->mixOnCalculateWeek = new QJsClosure($mixValue, array(""));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ChangeMonth':
					try {
						$this->blnChangeMonth = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'changeMonth', $this->blnChangeMonth);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ChangeYear':
					try {
						$this->blnChangeYear = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'changeYear', $this->blnChangeYear);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CloseText':
					try {
						$this->strCloseText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'closeText', $this->strCloseText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ConstrainInput':
					try {
						$this->blnConstrainInput = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'constrainInput', $this->blnConstrainInput);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'CurrentText':
					try {
						$this->strCurrentText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'currentText', $this->strCurrentText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'JqDateFormat':
					try {
						$this->strJqDateFormat = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dateFormat', $this->strJqDateFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNames':
					try {
						$this->arrDayNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dayNames', $this->arrDayNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNamesMin':
					try {
						$this->arrDayNamesMin = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dayNamesMin', $this->arrDayNamesMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DayNamesShort':
					try {
						$this->arrDayNamesShort = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'dayNamesShort', $this->arrDayNamesShort);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'DefaultDate':
					$this->mixDefaultDate = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'defaultDate', $mixValue);
					}
					break;

				case 'Duration':
					$this->mixDuration = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'duration', $mixValue);
					}
					break;

				case 'FirstDay':
					try {
						$this->intFirstDay = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'firstDay', $this->intFirstDay);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'GotoCurrent':
					try {
						$this->blnGotoCurrent = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'gotoCurrent', $this->blnGotoCurrent);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HideIfNoPrevNext':
					try {
						$this->blnHideIfNoPrevNext = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hideIfNoPrevNext', $this->blnHideIfNoPrevNext);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'IsRTL':
					try {
						$this->blnIsRTL = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'isRTL', $this->blnIsRTL);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MaxDate':
					$this->mixMaxDate = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'maxDate', $mixValue);
					}
					break;

				case 'MinDate':
					$this->mixMinDate = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'minDate', $mixValue);
					}
					break;

				case 'MonthNames':
					try {
						$this->arrMonthNames = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'monthNames', $this->arrMonthNames);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'MonthNamesShort':
					try {
						$this->arrMonthNamesShort = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'monthNamesShort', $this->arrMonthNamesShort);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NavigationAsDateFormat':
					try {
						$this->blnNavigationAsDateFormat = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'navigationAsDateFormat', $this->blnNavigationAsDateFormat);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NextText':
					try {
						$this->strNextText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'nextText', $this->strNextText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'NumberOfMonths':
					$this->mixNumberOfMonths = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'numberOfMonths', $mixValue);
					}
					break;

				case 'OnChangeMonthYear':
					try {
						$this->mixOnChangeMonthYear = new QJsClosure($mixValue, array("year","month","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnClose':
					try {
						$this->mixOnClose = new QJsClosure($mixValue, array("dateText","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'OnSelect':
					try {
						$this->mixOnSelect = new QJsClosure($mixValue, array("dateText","inst"));
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PrevText':
					try {
						$this->strPrevText = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'prevText', $this->strPrevText);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'SelectOtherMonths':
					try {
						$this->blnSelectOtherMonths = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'selectOtherMonths', $this->blnSelectOtherMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShortYearCutoff':
					$this->mixShortYearCutoff = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'shortYearCutoff', $mixValue);
					}
					break;

				case 'ShowAnim':
					try {
						$this->strShowAnim = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showAnim', $this->strShowAnim);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowButtonPanel':
					try {
						$this->blnShowButtonPanel = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showButtonPanel', $this->blnShowButtonPanel);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowCurrentAtPos':
					try {
						$this->intShowCurrentAtPos = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showCurrentAtPos', $this->intShowCurrentAtPos);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowMonthAfterYear':
					try {
						$this->blnShowMonthAfterYear = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showMonthAfterYear', $this->blnShowMonthAfterYear);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowOn':
					try {
						$this->strShowOn = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showOn', $this->strShowOn);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowOptions':
					$this->mixShowOptions = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'showOptions', $mixValue);
					}
					break;

				case 'ShowOtherMonths':
					try {
						$this->blnShowOtherMonths = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showOtherMonths', $this->blnShowOtherMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'ShowWeek':
					try {
						$this->blnShowWeek = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'showWeek', $this->blnShowWeek);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'StepMonths':
					try {
						$this->intStepMonths = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'stepMonths', $this->intStepMonths);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'WeekHeader':
					try {
						$this->strWeekHeader = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'weekHeader', $this->strWeekHeader);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'YearRange':
					try {
						$this->strYearRange = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'yearRange', $this->strYearRange);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'YearSuffix':
					try {
						$this->strYearSuffix = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'yearSuffix', $this->strYearSuffix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
