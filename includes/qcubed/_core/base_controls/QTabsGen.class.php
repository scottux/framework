<?php
	/**
	 * The abstract QTabsGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QTabsBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QTabs class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * <div>Triggered after a tab has been activated (after animation completes).
	 * 		If the tabs were previously collapsed, <code>ui.oldTab</code> and
	 * 		<code>ui.oldPanel</code> will be empty jQuery objects. If the tabs are
	 * 		collapsing, <code>ui.newTab</code> and <code>ui.newPanel</code> will be
	 * 		empty jQuery objects.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div> <ul><li><div><strong>newTab</strong></div> <div>Type:
	 * 		<a>jQuery</a></div> <div>The tab that was just activated.</div></li>
	 * 		<li><div><strong>oldTab</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The tab that was just deactivated.</div></li>
	 * 		<li><div><strong>newPanel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel that was just activated.</div></li>
	 * 		<li><div><strong>oldPanel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel that was just deactivated.</div></li></ul></li></ul>
	 */
	class QTabs_ActivateEvent extends QJqUiEvent {
		const EventName = 'tabsactivate';
	}
	/**
	 * <div>Triggered directly after a tab is activated. Can be canceled to
	 * 		prevent the tab from activating. If the tabs are currently collapsed,
	 * 		<code>ui.oldTab</code> and <code>ui.oldPanel</code> will be empty jQuery
	 * 		objects. If the tabs are collapsing, <code>ui.newTab</code> and
	 * 		<code>ui.newPanel</code> will be empty jQuery
	 * 		objects.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>newTab</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The tab that is about to be activated.</div></li>
	 * 		<li><div><strong>oldTab</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The tab that is about to be deactivated.</div></li>
	 * 		<li><div><strong>newPanel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel that is about to be activated.</div></li>
	 * 		<li><div><strong>oldPanel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel that is about to be deactivated.</div></li></ul></li></ul>
	 */
	class QTabs_BeforeActivateEvent extends QJqUiEvent {
		const EventName = 'tabsbeforeactivate';
	}
	/**
	 * <div>Triggered when a remote tab is about to be loaded, after the
	 * 		<a><code>beforeActivate</code></a> event. Can be canceled to prevent the
	 * 		tab panel from loading content; though the panel will still be activated.
	 * 		This event is triggered just before the Ajax request is made, so
	 * 		modifications can be made to <code>ui.jqXHR</code> and
	 * 		<code>ui.ajaxSettings</code>.</div><ul><li><div><strong>event</strong></div>
	 * 		<div>Type: <a>Event</a></div> <div></div></li>
	 * 		<li><div><strong>ui</strong></div> <div>Type: <a>Object</a></div>
	 * 		<div></div> <ul><li><div><strong>tab</strong></div> <div>Type:
	 * 		<a>jQuery</a></div> <div>The tab that is being loaded.</div></li>
	 * 		<li><div><strong>panel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel which will be populated by the Ajax response.</div></li>
	 * 		<li><div><strong>jqXHR</strong></div> <div>Type: <a>jqXHR</a></div>
	 * 		<div>The <code>jqXHR</code> object that is requesting the
	 * 		content.</div></li> <li><div><strong>ajaxSettings</strong></div> <div>Type:
	 * 		<a>Object</a></div> <div>The settings that will be used by
	 * 		<a><code>jQuery.ajax</code></a> to request the
	 * 		content.</div></li></ul></li></ul>
	 */
	class QTabs_BeforeLoadEvent extends QJqUiEvent {
		const EventName = 'tabsbeforeload';
	}
	/**
	 * <div>Triggered when the tabs are created. If the tabs are collapsed,
	 * 		<code>ui.tab</code> and <code>ui.panel</code> will be empty jQuery
	 * 		objects.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>tab</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The active tab.</div></li> <li><div><strong>panel</strong></div>
	 * 		<div>Type: <a>jQuery</a></div> <div>The active
	 * 		panel.</div></li></ul></li></ul>
	 */
	class QTabs_CreateEvent extends QJqUiEvent {
		const EventName = 'tabscreate';
	}
	/**
	 * <div>Triggered after a remote tab has been
	 * 		loaded.</div><ul><li><div><strong>event</strong></div> <div>Type:
	 * 		<a>Event</a></div> <div></div></li> <li><div><strong>ui</strong></div>
	 * 		<div>Type: <a>Object</a></div> <div></div>
	 * 		<ul><li><div><strong>tab</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The tab that was just loaded.</div></li>
	 * 		<li><div><strong>panel</strong></div> <div>Type: <a>jQuery</a></div>
	 * 		<div>The panel which was just populated by the Ajax
	 * 		response.</div></li></ul></li></ul>
	 */
	class QTabs_LoadEvent extends QJqUiEvent {
		const EventName = 'tabsload';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property mixed $Active <div>Which panel is currently open.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Boolean</strong>: Setting
	 * 		<code>active</code> to <code>false</code> will collapse all panels. This
	 * 		requires the <a><code>collapsible</code></a> option to be
	 * 		<code>true</code>.</li> <li><strong>Integer</strong>: The zero-based index
	 * 		of the panel that is active (open). A negative value selects panels going
	 * 		backward from the last panel.</li></ul>
	 * @property boolean $Collapsible <div>When set to <code>true</code>, the active panel can be closed.</div>
	 * @property mixed $Disabled <div>Which tabs are disabled.</div><strong>Multiple types
	 * 		supported:</strong><ul><li><strong>Boolean</strong>: Enable or disable all
	 * 		tabs.</li> <li><strong>Array</strong>: An array containing the zero-based
	 * 		indexes of the tabs that should be disabled, e.g., <code>[ 0, 2 ]</code>
	 * 		would disable the first and third tab.</li></ul>
	 * @property string $Event <div>The type of event that the tabs should react to in order to activate
	 * 		the tab. To activate on hover, use <code>"mouseover"</code>.</div>
	 * @property string $HeightStyle <div>Controls the height of the tabs widget and each panel. Possible
	 * 		values: 				<ul><li><code>"auto"</code>: All panels will be set to the
	 * 		height of the tallest panel.</li> 					<li><code>"fill"</code>: Expand to
	 * 		the available height based on the tabs' parent height.</li>
	 * 							<li><code>"content"</code>: Each panel will be only as tall as its
	 * 		content.</li></ul></div>
	 * @property mixed $Hide <div>If and how to animate the hiding of the panel.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Boolean</strong>:  			When set to
	 * 		<code>false</code>, no animation will be used and the panel will be hidden
	 * 		immediately. 			When set to <code>true</code>, the panel will fade out with
	 * 		the default duration and the default easing.</li>
	 * 		<li><strong>Number</strong>:  			The panel will fade out with the specified
	 * 		duration and the default easing.</li> <li><strong>String</strong>:  			The
	 * 		panel will be hidden using the specified effect. 			The value can either be
	 * 		the name of a built-in jQuery animateion method, such as
	 * 		<code>"slideUp"</code>, or the name of a jQuery UI effect, such as
	 * 		<code>"fold"</code>. 			In either case the effect will be used with the
	 * 		default duration and the default easing.</li> <li><strong>Object</strong>:
	 * 		If the value is an object, then <code>effect</code>, <code>duration</code>,
	 * 		and <code>easing</code> properties may be provided. If the
	 * 		<code>effect</code> property contains the name of a jQuery method, then
	 * 		that method will be used; otherwise it is assumed to be the name of a
	 * 		jQuery UI effect. When using a jQuery UI effect that supports additional
	 * 		settings, you may include those settings in the object and they will be
	 * 		passed to the effect. If <code>duration</code> or <code>easing</code> is
	 * 		omitted, then the default values will be used. If <code>effect</code> is
	 * 		omitted, then <code>"fadeOut"</code> will be used.</li></ul>
	 * @property mixed $Show <div>If and how to animate the showing of the panel.</div><strong>Multiple
	 * 		types supported:</strong><ul><li><strong>Boolean</strong>:  			When set to
	 * 		<code>false</code>, no animation will be used and the panel will be shown
	 * 		immediately. 			When set to <code>true</code>, the panel will fade in with
	 * 		the default duration and the default easing.</li>
	 * 		<li><strong>Number</strong>:  			The panel will fade in with the specified
	 * 		duration and the default easing.</li> <li><strong>String</strong>:  			The
	 * 		panel will be shown using the specified effect. 			The value can either be
	 * 		the name of a built-in jQuery animateion method, such as
	 * 		<code>"slideDown"</code>, or the name of a jQuery UI effect, such as
	 * 		<code>"fold"</code>. 			In either case the effect will be used with the
	 * 		default duration and the default easing.</li> <li><strong>Object</strong>:
	 * 		If the value is an object, then <code>effect</code>, <code>duration</code>,
	 * 		and <code>easing</code> properties may be provided. If the
	 * 		<code>effect</code> property contains the name of a jQuery method, then
	 * 		that method will be used; otherwise it is assumed to be the name of a
	 * 		jQuery UI effect. When using a jQuery UI effect that supports additional
	 * 		settings, you may include those settings in the object and they will be
	 * 		passed to the effect. If <code>duration</code> or <code>easing</code> is
	 * 		omitted, then the default values will be used. If <code>effect</code> is
	 * 		omitted, then <code>"fadeIn"</code> will be used.</li></ul>
	 */

	class QTabsGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var mixed */
		protected $mixActive;
		/** @var boolean */
		protected $blnCollapsible = null;
		/** @var mixed */
		protected $mixDisabled = null;
		/** @var string */
		protected $strEvent = null;
		/** @var string */
		protected $strHeightStyle = null;
		/** @var mixed */
		protected $mixHide = null;
		/** @var mixed */
		protected $mixShow = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Active', 'active');
			$strJqOptions .= $this->makeJsProperty('Collapsible', 'collapsible');
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Event', 'event');
			$strJqOptions .= $this->makeJsProperty('HeightStyle', 'heightStyle');
			$strJqOptions .= $this->makeJsProperty('Hide', 'hide');
			$strJqOptions .= $this->makeJsProperty('Show', 'show');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqSetupFunction() {
			return 'tabs';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			$str = '';
			if ($this->getJqControlId() !== $this->ControlId) {
				// #845: if the element receiving the jQuery UI events is different than this control
				// we need to clean-up the previously attached event handlers, so that they are not duplicated 
				// during the next ajax update which replaces this control.
				$str = sprintf('jQuery("#%s").off(); ', $this->getJqControlId());
			}
			return $str . $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * <div>Removes the tabs functionality completely. This will return the
		 * element back to its pre-init state.</div><ul><li><div>This method does not
		 * accept any arguments.</div></li></ul>
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * <div>Disables all tabs.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * <div>Disables a tab. The selected tab cannot be disabled. To disable more
		 * than one tab at once, set the <a><code>disabled</code></a> option: <code>$(
		 * "#tabs" ).tabs( "option", "disabled", [ 1, 2, 3 ]
		 * )</code>.</div><ul><li><div><strong>index</strong></div> <div>Type:
		 * <a>Number</a> or <a>String</a></div> <div>Which tab to
		 * disable.</div></li></ul>
		 * @param $index
		 */
		public function Disable1($index) {
			$this->CallJqUiMethod("disable", $index);
		}
		/**
		 * <div>Enables all tabs.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * <div>Enables a tab. To enable more than one tab at once reset the disabled
		 * property like: <code>$( "#example" ).tabs( "option", "disabled", []
		 * );</code>.</div><ul><li><div><strong>index</strong></div> <div>Type:
		 * <a>Number</a> or <a>String</a></div> <div>Which tab to
		 * enable.</div></li></ul>
		 * @param $index
		 */
		public function Enable1($index) {
			$this->CallJqUiMethod("enable", $index);
		}
		/**
		 * <div>Loads the panel content of a remote
		 * tab.</div><ul><li><div><strong>index</strong></div> <div>Type:
		 * <a>Number</a> or <a>String</a></div> <div>Which tab to
		 * load.</div></li></ul>
		 * @param $index
		 */
		public function Load($index) {
			$this->CallJqUiMethod("load", $index);
		}
		/**
		 * <div>Gets the value currently associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * get.</div></li></ul>
		 * @param $optionName
		 */
		public function Option($optionName) {
			$this->CallJqUiMethod("option", $optionName);
		}
		/**
		 * <div>Gets an object containing key/value pairs representing the current
		 * tabs options hash.</div><ul><li><div>This method does not accept any
		 * arguments.</div></li></ul>
		 */
		public function Option1() {
			$this->CallJqUiMethod("option");
		}
		/**
		 * <div>Sets the value of the tabs option associated with the specified
		 * <code>optionName</code>.</div><ul><li><div><strong>optionName</strong></div>
		 * <div>Type: <a>String</a></div> <div>The name of the option to
		 * set.</div></li> <li><div><strong>value</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A value to set for the option.</div></li></ul>
		 * @param $optionName
		 * @param $value
		 */
		public function Option2($optionName, $value) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * <div>Sets one or more options for the
		 * tabs.</div><ul><li><div><strong>options</strong></div> <div>Type:
		 * <a>Object</a></div> <div>A map of option-value pairs to
		 * set.</div></li></ul>
		 * @param $options
		 */
		public function Option3($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * <div>Process any tabs that were added or removed directly in the DOM and
		 * recompute the height of the tab panels. Results depend on the content and
		 * the <a><code>heightStyle</code></a> option.</div><ul><li><div>This method
		 * does not accept any arguments.</div></li></ul>
		 */
		public function Refresh() {
			$this->CallJqUiMethod("refresh");
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Active': return $this->mixActive;
				case 'Collapsible': return $this->blnCollapsible;
				case 'Disabled': return $this->mixDisabled;
				case 'Event': return $this->strEvent;
				case 'HeightStyle': return $this->strHeightStyle;
				case 'Hide': return $this->mixHide;
				case 'Show': return $this->mixShow;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Active':
					$this->mixActive = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'active', $mixValue);
					}
					break;

				case 'Collapsible':
					try {
						$this->blnCollapsible = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'collapsible', $this->blnCollapsible);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Disabled':
					$this->mixDisabled = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'disabled', $mixValue);
					}
					break;

				case 'Event':
					try {
						$this->strEvent = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'event', $this->strEvent);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HeightStyle':
					try {
						$this->strHeightStyle = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'heightStyle', $this->strHeightStyle);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Hide':
					$this->mixHide = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'hide', $mixValue);
					}
					break;

				case 'Show':
					$this->mixShow = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'show', $mixValue);
					}
					break;


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
